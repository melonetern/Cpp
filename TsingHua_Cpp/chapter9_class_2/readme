+constructor 
used for data INITIALIZATION
same name as class name
example:
class Time
{public:
  Time()
  {hour=0;
   minute=0;
   sec =0;
  }
  void set_time();
  void show_time();
 private:
  int hour,minute,sec;
};

Time t1; //  Time() executed only once automatically,can't be called

//--------------constructor with parameters-----------
class Box
{
  public:
    Box(int,int,int);
    int volume();
  private:
    int height;
    int width;
    int length;
};

Box::Box(int h,int w, int len)       //Box::Box(int h, int w, int len):height(h),width(w),length(len){}
{  height =h; width=w, length=len;}

int Box::volume()
{return height*width*length;}

int main()
{Box box1(12,25,30);
 cout<<"The volume of box1 is "<<box1.volume()<<endl;
 Box box2(15,30,21);
 cout<<"The volume of box2 is "<<box2.volume()<<endl;
 return 0;
}
//--------------------------------------------------------

//--------------destructor------------------------------
see classic_cpp



//------------array of class-------------------------------
Student stud[30];
Student::Student(int=1001;int=18;int=60);
Student stud[3] = {60,70,78}; // each as one of the first parameter

Student stud[3] ={
  Student(1001,18,87),
  Student(1002,19,76),
  student(1003,18,72)
};


const型数据的小结
Time const t1;或 const Time t1;                 t1是常对象，其值任何情况下都不能改变
void Time::fun() const                          fun是Time类中的常成员函数，可以引用，但不能修改本类中的数据成员
Time * const p,                                 p是指向Time类对象的常指针，p的值(即p的指向)不能改变
const Time *p;                                  p是指向Time类对象的指针，其指向的类对象的值不能通过指针来改变
Time &t1 =t;                                    t1是Time类对象t的引用，t和t1指向同一段内存空间
